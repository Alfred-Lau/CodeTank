{"version":3,"sources":["user.js"],"names":[],"mappings":";;AAAA;;;;AAIA,IAAI,WAAW,QAAQ,UAAR,CAAf;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,mBAAmB,EAAvB;;AAEA,IAAI,aAAa,IAAI,SAAS,MAAb,CAAoB;AACjC,UAAM;AACF,gBAAQ,IADN;AAEF,cAAM;AAFJ,KAD2B;AAKjC,cAAU,MALuB;AAMjC;AACA;AACA;AACA;AACA;AACA,UAAM;AACF,cAAM,MADJ;AAEF,iBAAS;AAFP,KAX2B;AAejC,UAAM;AACF,kBAAU;AACN,kBAAM,IADA;AAEN,qBAAS,KAAK,GAAL;AAFH,SADR;AAKF,kBAAU;AACN,kBAAM,IADA;AAEN,qBAAS,KAAK,GAAL;AAFH;AALR;AAf2B,CAApB,CAAjB;;AA2BA,WAAW,GAAX,CAAe,MAAf,EAAuB,UAAS,IAAT,EAAe;AAClC,QAAI,OAAO,IAAX;;AAEA,QAAI,KAAK,KAAT,EAAgB;AACZ,aAAK,IAAL,CAAU,QAAV,GAAqB,KAAK,IAAL,CAAU,QAAV,GAAqB,KAAK,GAAL,EAA1C;AACH,KAFD,MAGK;AACD,aAAK,IAAL,CAAU,QAAV,GAAqB,KAAK,GAAL,EAArB;AACH;;AAED,WAAO,OAAP,CAAe,gBAAf,EAAiC,UAAS,GAAT,EAAc,IAAd,EAAoB;AACjD,YAAI,GAAJ,EAAS,OAAO,KAAK,GAAL,CAAP;;AAET,eAAO,IAAP,CAAY,KAAK,QAAjB,EAA2B,IAA3B,EAAiC,UAAS,GAAT,EAAc,IAAd,EAAoB;AACjD,gBAAI,GAAJ,EAAS,OAAO,KAAK,GAAL,CAAP;;AAET,iBAAK,QAAL,GAAgB,IAAhB;AACA;AACH,SALD;AAMH,KATD;AAUH,CApBD;;AAsBA,WAAW,OAAX,GAAqB;AACjB,qBAAiB,yBAAS,SAAT,EAAoB,EAApB,EAAwB;AACrC,eAAO,OAAP,CAAe,SAAf,EAA0B,KAAK,QAA/B,EAAyC,UAAS,GAAT,EAAc,OAAd,EAAuB;AAC5D,gBAAI,GAAJ,EAAS,OAAO,GAAG,GAAH,CAAP;;AAET,eAAG,IAAH,EAAS,OAAT;AACH,SAJD;AAKH;AAPgB,CAArB;;AAUA,WAAW,OAAX,GAAqB;AACjB,WAAO,eAAS,EAAT,EAAa;AAChB,eAAO,KACF,IADE,CACG,EADH,EAEF,IAFE,CAEG,eAFH,EAGF,IAHE,CAGG,EAHH,CAAP;AAIH,KANgB;AAOjB,cAAU,kBAAS,EAAT,EAAa,EAAb,EAAiB;AACvB,eAAO,KACF,OADE,CACM,EAAC,KAAK,EAAN,EADN,EAEF,IAFE,CAEG,EAFH,CAAP;AAGH;AAXgB,CAArB;;AAcA,OAAO,OAAP,GAAiB,UAAU,UAA3B","file":"user-compiled.js","sourcesContent":["/**\n * Created by alfredlau on 2016/8/15.\n */\n\nvar mongoose = require('mongoose')\nvar bcrypt = require('bcrypt')\nvar SALT_WORK_FACTOR = 10\n\nvar UserSchema = new mongoose.Schema({\n    name: {\n        unique: true,\n        type: String\n    },\n    password: String,\n    // 0: nomal user\n    // 1: verified user\n    // 2: professonal user\n    // >10: admin\n    // >50: super admin\n    role: {\n        type: Number,\n        default: 0\n    },\n    meta: {\n        createAt: {\n            type: Date,\n            default: Date.now()\n        },\n        updateAt: {\n            type: Date,\n            default: Date.now()\n        }\n    }\n})\n\nUserSchema.pre('save', function(next) {\n    var user = this\n\n    if (this.isNew) {\n        this.meta.createAt = this.meta.updateAt = Date.now()\n    }\n    else {\n        this.meta.updateAt = Date.now()\n    }\n\n    bcrypt.genSalt(SALT_WORK_FACTOR, function(err, salt) {\n        if (err) return next(err)\n\n        bcrypt.hash(user.password, salt, function(err, hash) {\n            if (err) return next(err)\n\n            user.password = hash\n            next()\n        })\n    })\n})\n\nUserSchema.methods = {\n    comparePassword: function(_password, cb) {\n        bcrypt.compare(_password, this.password, function(err, isMatch) {\n            if (err) return cb(err)\n\n            cb(null, isMatch)\n        })\n    }\n}\n\nUserSchema.statics = {\n    fetch: function(cb) {\n        return this\n            .find({})\n            .sort('meta.updateAt')\n            .exec(cb)\n    },\n    findById: function(id, cb) {\n        return this\n            .findOne({_id: id})\n            .exec(cb)\n    }\n}\n\nmodule.exports = exports = UserSchema"]}